---
import { Image } from "astro:assets";

const { project } = Astro.props;
---

<div
  class="relative z-10 flex flex-col gap-4 bg-white border-b border-gray-500 [&:not(:first-child)]:pt-30"
>
  <h2
    class="text-8xl max-w-[1450px] mx-auto uppercase text-center tracking-tighter leading-[85%] text-balance sticky top-4 py-10 mb-10"
  >
    {project.title}
    <div class="absolute top-0 left-0 size-2 bg-gray-900">
      <!-- <div class="absolute top-0 left-0 size-1.5 bg-white"></div> -->
    </div>
    <div class="absolute top-0 right-0 size-2 bg-gray-900">
      <!-- <div class="absolute top-0 right-0 size-1.5 bg-white"></div> -->
    </div>
    <div class="absolute bottom-0 left-0 size-2 bg-gray-900">
      <!-- <div class="absolute bottom-0 left-0 size-1.5 bg-white"></div> -->
    </div>
    <div class="absolute bottom-0 right-0 size-2 bg-gray-900">
      <!-- <div class="absolute bottom-0 right-0 size-1.5 bg-white"></div> -->
    </div>
  </h2>
  <div class="bg-white z-20">
    <div class="flex gap-2 pb-20 pt-2 w-full relative h-full">
      {
        project.images &&
          project.images.map(
            (asset: {
              src: string;
              isVideo: boolean;
              aspectRatio: string;
              isHorizontal?: boolean;
            }) => {
              return (
                <div
                  class={
                    asset.isHorizontal
                      ? `relative w-full h-auto ${asset.aspectRatio}`
                      : `relative w-auto`
                  }
                >
                  {asset.isVideo ? (
                    <video
                      src={asset.src}
                      class="relative size-full object-cover"
                      autoplay
                      muted
                      loop
                      playsinline
                    />
                  ) : (
                    <Image
                      src={asset.src}
                      alt=""
                      class="relative size-full object-cover"
                      inferSize
                    />
                  )}
                </div>
              );
            }
          )
      }
    </div>
    <div class="max-w-[1450px] mx-auto flex gap-1 pb-20 relative items-stretch">
      <div class="w-1/2 text-sm text-balance flex flex-col overflow-hidden">
        <div class="uppercase text-xs tracking-wider bg-black text-white p-1">
          Ã€ Propos
        </div>
        <div class="text-gray-500 bg-gray-100 p-1 flex-1">
          <p class="text-balance max-w-[100ch]">
            {project.description}
          </p>
        </div>
      </div>
      <div class="w-1/2 text-sm text-balance flex flex-col overflow-hidden">
        <div
          class="uppercase text-xs tracking-wider bg-black text-white px-1 py-1"
        >
          Stack
        </div>
        <div class="flex flex-wrap gap-1 bg-gray-100 p-1 flex-1">
          {
            project.stack &&
              project.stack.map((tech: string, index: number) => (
                <span class="text-sm text-gray-500">
                  {index < project.stack.length - 1 ? `${tech}, ` : `${tech}.`}
                </span>
              ))
          }
        </div>
      </div>
    </div>
  </div>
</div>
