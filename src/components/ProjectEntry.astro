---
import { Image } from "astro:assets";

const { project } = Astro.props;
---

<div
  class="px-2 relative z-10 flex flex-col gap-4 bg-white pt-10 [&:not(:first-child)]:pt-30 pb-4"
>
  <h2
    class="text-8xl max-w-[1450px] mx-auto uppercase text-center tracking-tighter leading-[85%] text-balance sticky top-4 py-10 mb-10 project-title"
  >
    {project.title}
    <div
      class="absolute top-0 left-0 size-2 bg-gray-900 rounded-[2px] corner-element"
    >
    </div>
    <div
      class="absolute top-0 right-0 size-2 bg-gray-900 rounded-[2px] corner-element"
    >
    </div>
    <div
      class="absolute bottom-0 left-0 size-2 bg-gray-900 rounded-[2px] corner-element"
    >
    </div>
    <div
      class="absolute bottom-0 right-0 size-2 bg-gray-900 rounded-[2px] corner-element"
    >
    </div>
  </h2>
  <div class="bg-white z-20" id="project-images">
    <div class="flex gap-2 py-2 pb-0 w-full relative h-full">
      {
        project.images &&
          project.images.map(
            (
              asset: {
                src: string;
                isVideo: boolean;
                aspectRatio: string;
                isHorizontal?: boolean;
              },
              index: number
            ) => {
              return (
                <div
                  class={
                    asset.isHorizontal
                      ? `relative w-full h-auto ${asset.aspectRatio} cursor-pointer lightbox-trigger`
                      : `relative w-auto cursor-pointer lightbox-trigger`
                  }
                  data-index={index}
                >
                  {asset.isVideo ? (
                    <video
                      src={asset.src}
                      class="relative size-full object-cover"
                      autoplay
                      muted
                      loop
                      playsinline
                    />
                  ) : (
                    <Image
                      src={asset.src}
                      alt=""
                      class="relative size-full object-cover"
                      width={800}
                      height={600}
                      format="webp"
                      quality={80}
                    />
                  )}
                </div>
              );
            }
          )
      }
    </div>
    <div
      class="mx-auto flex justify-between z-0 items-stretch sticky bottom-0 bg-white"
    >
      <div class="w-1/3 pt-1 text-sm text-balance flex overflow-hidden">
        <div class="uppercase text-[10px] tracking-wider p-1">
          <span class="translate-y-[1px]"> [ Ã€ Propos ] </span>
        </div>
        <p class="text-gray-500 p-1 flex-1 text-[12px] text-balance">
          {project.description}
        </p>
      </div>
      <div class="pt-1 text-sm text-balance flex overflow-hidden">
        <div class="flex flex-col uppercase text-[10px] tracking-wider p-1">
          <span class=""> [ Stack ] </span>
        </div>
        <div class="flex flex-wrap gap-1 p-1 flex-1">
          {
            project.stack &&
              project.stack.map((tech: string, index: number) => (
                <span class="text-[12px]  text-gray-500">
                  {index < project.stack.length - 1 ? `${tech}, ` : `${tech}.`}
                </span>
              ))
          }
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  // Get all corner elements
  const cornerElements = document.querySelectorAll(".corner-element");

  // Set initial state - all corners invisible
  gsap.set(cornerElements, { opacity: 0, scale: 0 });

  cornerElements.forEach((element) => {
    const randomDelay = 0.1 + Math.random() * 0.25;

    // Create flicker timeline
    const flickerTimeline = gsap.timeline({
      scrollTrigger: {
        trigger: element.parentElement,
        start: "top 80%", // Start animation when the top of the parent is 80% from the top of viewport
        once: true,
      },
      delay: randomDelay,
    });

    // Add more dramatic flicker effect with subtle x translation
    flickerTimeline
      .to(element, { opacity: 1, scale: 1.2, x: 0.3, duration: 0.08 })
      .to(element, { opacity: 0, scale: 0.8, x: -0.3, duration: 0.04 })
      .to(element, { opacity: 0.9, scale: 1.1, x: 0.2, duration: 0.06 })
      .to(element, { opacity: 0.1, scale: 0.9, x: -0.2, duration: 0.03 })
      .to(element, { opacity: 1, scale: 1.15, x: 0.3, duration: 0.05 })
      .to(element, { opacity: 0.3, scale: 0.85, x: -0.3, duration: 0.04 })
      .to(element, { opacity: 0.8, scale: 1.05, x: 0.2, duration: 0.06 })
      .to(element, { opacity: 0.2, scale: 0.95, x: -0.2, duration: 0.03 })
      .to(element, { opacity: 1, scale: 1, x: 0, duration: 0.07 });
  });

  // Title flickering effect
  const projectTitles = document.querySelectorAll(".project-title");

  // Set initial state for titles - but don't set opacity to 0 here
  // This allows the fade in/out animation to control opacity after the flicker

  projectTitles.forEach((title) => {
    const titleFlickerTimeline = gsap.timeline({
      scrollTrigger: {
        trigger: title,
        start: "top 80%",
        once: true, // Only play the flicker animation once
      },
    });

    // Create a more subtle flicker for the title text with minimal x translation
    titleFlickerTimeline
      .set(title, { opacity: 0 }) // Set initial opacity here instead
      .to(title, { opacity: 0.7, x: 0.5, duration: 0.1 })
      .to(title, { opacity: 0.2, x: -0.3, duration: 0.05 })
      .to(title, { opacity: 0.9, x: 0.4, duration: 0.08 })
      .to(title, { opacity: 0.5, x: -0.4, duration: 0.03 })
      .to(title, { opacity: 1, x: 0.3, duration: 0.07 })
      .to(title, { opacity: 0.8, x: -0.2, duration: 0.02 })
      .to(title, { opacity: 1, x: 0.2, duration: 0.06 })
      .to(title, { opacity: 0.6, x: -0.1, duration: 0.04 })
      .to(title, { opacity: 1, x: 0, duration: 0.1 });
  });

  // Lightbox functionality
  const triggers = document.querySelectorAll(".lightbox-trigger");

  // Store all media elements for quick access
  const mediaElements: { isVideo: boolean; src: string }[] = [];
  triggers.forEach((trigger, index) => {
    // Store reference to the media element (image or video)
    const mediaElement = trigger.querySelector("img, video");
    if (mediaElement) {
      mediaElements[index] = {
        isVideo: mediaElement.tagName === "VIDEO",
        src: mediaElement.getAttribute("src") || "",
      };

      // Add click event to open lightbox
      trigger.addEventListener("click", () => {
        console.log(
          "Trigger clicked, opening lightbox with:",
          mediaElements[index]
        );
        // Dispatch custom event to open the global lightbox
        document.dispatchEvent(
          new CustomEvent("openGlobalLightbox", {
            detail: {
              content: mediaElements[index].src,
              isVideo: mediaElements[index].isVideo,
            },
          })
        );
      });
    }
  });
</script>
